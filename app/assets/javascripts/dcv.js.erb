$(function() {
  /* rand banner img */
  /* unused for now
  var $rbi = [];
  var $ielems = $('.thumbnail img'), icount = $ielems.length;
  $ielems.each(function() {
    $rbi.push($ielems.attr('src'));
    if (!--icount) {
      ix = Math.floor($rbi.length*Math.random())
      $('#site-banner-left').css('background-image','url('+$rbi[ix]+')');
    }
  });
  */
  /* scroll to top function */
  $('body').on('click', '.totop', function() {
    $('body,html').animate({ scrollTop: 0 }, 500, 'swing');
    return false;
  });
  $('body').on('click', '.tocontent', function() {
    $('body,html').animate({ scrollTop: $('#content').offset().top - $('#topnavbar').height() }, 500, 'swing');
    return false;
  });
  $('body').on('click', '#list-mode', function() {
      $('#content .col-sm-3').addClass('col-sm-12').addClass('list-view');
      $('#content .col-sm-3 .thumbnail').addClass('col-sm-2');
      $('#content .col-sm-3 .index_title').addClass('col-sm-9');
      $('#grid-mode').removeClass('btn-success').addClass('btn-default');
      $('#content .index-show-fields').removeClass('hidden');
      $(this).addClass('btn-success');
  });
  $('body').on('click', '#grid-mode', function() {
      $('#content .col-sm-3').removeClass('col-sm-12').removeClass('list-view');
      $('#content .col-sm-3 .thumbnail').removeClass('col-sm-2');
      $('#content .col-sm-3 .index_title').removeClass('col-sm-9');
      $('#list-mode').removeClass('btn-success').addClass('btn-default');
      $('#content .index-show-fields').addClass('hidden');
      $(this).addClass('btn-success');
  });
  $('body').on('click', '#unzoom-mode', function(){
     // hide the zooming stuff
      $('div#zoom-gallery').addClass('hidden');

      $('#child_items').removeClass('hidden');
      $('#zoom-mode').removeClass('btn-success').addClass('btn-default');
      $(this).addClass('btn-success');
  });
  $('body').on('click', '#zoom-mode', function(){
    switchToZoom();
  });
  $('body').on('click', '#inset-zoom-mode', function(){
    switchToZoom();
  });
  $('#search-navbar').find('.reset-btn').hover(function() {
      $('#appliedParams').find('.remove').addClass('btn-danger');
    }, function() {
      $('#appliedParams').find('.remove').removeClass('btn-danger');
  });
  $('#q').focus(function() {
    $('#search-navbar .input-group').css('box-shadow','0 0 18px #ccf');
  });
  $('#q').blur(function() {
    $('#search-navbar .input-group').css('box-shadow','none');
  });
  $('#show_file_assets_checkbox').on('change', function(){
    window.location = decodeURIComponent($(this).attr('data-new-location'));
  });
  $('#collapseDesc').on('show.bs.collapse', function(e){
    $(this).parent().find('i.more').addClass('glyphicon-chevron-down');
    $(this).parent().find('i.more').removeClass('glyphicon-chevron-right');
  })
  $('#collapseDesc').on('hide.bs.collapse', function(e){
    $(this).parent().find('i.more').removeClass('glyphicon-chevron-down');
    $(this).parent().find('i.more').addClass('glyphicon-chevron-right');
  })

  DCV.DateRangeSlider.init();
});

function initTiles() {
  if (!$.tileSources){
    $.djUrl = "http://iris.cul.columbia.edu:8888/view/";
    if ($('#zoom-gallery').attr('data-url')) {
      setTilesFromQuery($('#zoom-gallery').attr('data-url'))
    } else {
      loadByteStreams($('#zoom-gallery').attr('data-bytestreams'), setTileFromId);
    }
  } else {
    initZoomingViewer($.tileSources);
  }
}
function initZoomingViewer(tileSources) {
  if ($.zoomingViewer) {
    $.zoomingViewer.open(tileSources);
  } else {
    $.zoomingViewer = OpenSeadragon({
      id:            "zoom-content",
      prefixUrl:     "",
      springStiffness:        10,
      showReferenceStrip:     (tileSources.length > 1),
      autoHideControls:       false,
      showNavigator:  true,
      tileSources: tileSources,
      zoomInButton:   "zoom-in-control",
      zoomOutButton:  "zoom-out-control",
      homeButton:     "zoom-home-control",
      fullPageButton: "zoom-full-control",
      nextButton:     "zoom-next-control",
      previousButton: "zoom-prev-control",
      showSequenceControl: (tileSources.length > 1)
    });
    $.zoomingViewer.addHandler('open',handleImageChange,null);
  }
}

function setTilesFromQuery(dataUrl){
  $.ajax({
    dataType: "json",
    url: dataUrl,
    success: function(data){
      var sources = [];
      var children = data['children'] || [data];
      var children_map = {};

      for (var i=0; i<children.length; i++) {
        var child = children[i];
        children_map[child['id']] = child;
      }
      $("#children-links a[rel='child']").each(function() {
        var child = null;
        var dataId = $(this).attr('data-id');
        for (var i=0; i< children.length; i++) {
          if (children[i]['id'] == dataId) {
            child = children[i];
            break;
          }
          if (children[i]['contentids'].indexOf(dataId) > -1) {
            child = children[i];
            break;
          }
        }
        if (child && child['rft_id']) {
          $(this).attr('data-rftId',child['rft_id'])
          //sources[sources.length] = new OpenSeadragon.DjTileSource($.djUrl, child['rft_id']);
          sources[sources.length] = new OpenSeadragon.CalculatedDjTileSource($.djUrl, child['rft_id'], child['width'], child['length']);
        }
      });
      $.tileSources = sources;
      initZoomingViewer($.tileSources);
    }
  });
}

function handleImageChange(event) {
  var src = event.source;
  var tile = event.tileSource;
  var bsUrl = null;
  var dataId = "[none]";
  $("a[rel='child']").each(function(){
    if ($(this).attr('data-rftId') == src.imageID) {
      bsUrl = $(this).attr('data-bytestreams');
    }
  })
  loadByteStreams(bsUrl, setDownloads);
}

function loadByteStreams(bsUrl, handler) {
  if (!$.bytestreams) $.bytestreams = {};
  if ($.bytestreams[bsUrl]) {
    if (handler) handler.call(this,data);
  } else {
    $.ajax({
      dataType: "json",
      url: bsUrl,
      success: function(data){
        $.bytestreams[bsUrl] = data;
        if (handler) handler.call(this,data);
      }
    });
  }
}

function setDownloads(data) {
  $('#dlwrapper ul.dropdown-menu').each(function(list){
    li_html = '';
    for(var i=0;i<data.length;i++){
      dlName = data[i]["title"] + '.' + data[i]["url"].match(/\.([^.]+)$/)[1];
      dlName += ' (' + data[i]["width"] + 'x' + data[i]["length"] + ')';
      li_html += '<li><a href="' + data[i]["url"] + '" target="_blank">' + dlName + '</a></li>'
    }
    $(this).html(li_html);
  });
}
function favoriteChild(child) {
  var screenUrl = $(child).attr('href');
  var screenImg = $('#favorite-child img').first();
  var dataCounter = $(child).attr('data-counter');
  if (screenUrl != screenImg.attr('src')) {
    screenImg.attr('src', screenUrl);
    screenImg.attr('data-counter', dataCounter);
  }
}
//** CULTNBW START **/
  CULh_colorfg = '#000000'; // topnavbar foreground color. hex value. ex: #002B7F
  CULh_colorbg = '#444444'; // topnavbar background color. hex value. ex: #779BC3
  CULh_nobs = 1; // uncomment to NOT load our bootstrap javascript file and or use your own (v2.3.x required)
//** /CULTNBW END **/



/*********************
 * Date Range Slider *
 *********************/

DCV.DateRangeSlider = {};
DCV.DateRangeSlider.maxNumSegments = 30;
DCV.DateRangeSlider.lastClickEvent = null;

DCV.DateRangeSlider.dateCache = null;

DCV.DateRangeSlider.init = function() {
  if ($('#date-range-widget').length > 0 && DCV.dateWidgetData != null) {
    $('#date-range-widget').html('<canvas id="date-range-canvas" width="1000" height="80"></canvas>');
    var canvasJQueryElement = $('#date-range-canvas');
    canvasJQueryElement.attr('data-original-width', canvasJQueryElement[0].width).attr('data-original-height', canvasJQueryElement[0].height);
    DCV.DateRangeSlider.resizeCanvas();
    DCV.DateRangeSlider.render();
    $(window).on('resize', DCV.DateRangeSlider.resizeCanvas);
    canvasJQueryElement.on('mousedown', function(e1){
      var e1ParentOffset = $(this).offset();
      var canvasXLocation = e1.pageX - e1ParentOffset.left;
      var canvasYLocation = e1.pageY - e1ParentOffset.top;

      $('#date-range-canvas').attr('data-begin-drag', 'true');
      $('#date-range-canvas').attr('data-drag-start-x', canvasXLocation);
      $("#date-range-canvas").on('mousemove.daterange', function(e2){
      if($('#date-range-canvas').attr('data-begin-drag') == 'true') {

          var e2ParentOffset = $(this).offset();
          var canvasXDragLocation = e2.pageX - e2ParentOffset.left;
          var canvasYDragLocation = e2.pageY - e2ParentOffset.top;

          $('#date-range-canvas').attr('data-drag-end-x', canvasXDragLocation);
          DCV.DateRangeSlider.render();
        }
      });
      $(window).on('mouseup.daterange', function(e){
        if ($('#date-range-canvas').attr('data-begin-drag') == 'true') {
          $('#date-range-canvas').attr('data-begin-drag', 'false');
          $(window).off('.daterange'); //Remove .daterange listeners so that we're not constantly listening for mousemove and mouseup events
          //And redirect to the correct date range selection
          var newStartYearFilter = $('#date-range-canvas').attr('data-new-start-year-filter');
          var newEndYearFilter = $('#date-range-canvas').attr('data-new-end-year-filter');
          var redirecUrl = decodeURIComponent(DCV.newDateFilterTemplateUrl).replace('_start_year_', newStartYearFilter).replace('_end_year_', newEndYearFilter);
          window.location = redirecUrl;
        }
      });
    });
  }
};

DCV.DateRangeSlider.resizeCanvas = function() {
  // Make sure that actual canvas dimensions are equal to the current size
  // so that we don't get anti-aliased rescaling.  This will look sharper.

  var c = document.getElementById('date-range-canvas');
  var aspectRatio = parseInt($(c).attr('data-original-width'))/parseInt($(c).attr('data-original-height'));
  var canvasWidth = $(c).width();
  var canvasHeight = canvasWidth/aspectRatio;
  $(c).height(canvasHeight);

  c.width = canvasWidth;
  c.height = canvasHeight;

  DCV.DateRangeSlider.render();
};

DCV.DateRangeSlider.render = function() {

  var c = document.getElementById('date-range-canvas');

  var ctx = c.getContext('2d');

  ctx.clearRect ( 0 , 0 , c.width , c.height ); //clear canvas

  var segmentColors = ['#333', '#666'];

  ctx.lineWidth   = 1;
  ctx.strokeStyle = '#000';
  ctx.fillStyle   = '#000';

  // DCV.dateWidgetData is declared in-page, generated server-side.
  var earliestStartYear = DCV.dateWidgetData['earliest_start_year'];
  var latestEndYear = DCV.dateWidgetData['latest_end_year'];
  var segments = DCV.dateWidgetData['segments'];
  var yearsPerSegment = DCV.dateWidgetData['years_per_segment'];
  var highestSegmentCountValue = DCV.dateWidgetData['highest_segment_count_value'];

  var numSegments = segments.length;

  var padding = c.width/15;
  var segmentWidth = (c.width-padding*2)/numSegments;

  //Draw bounding box
  for(var i = 0; i < numSegments; i++) {

    //Time dividing lines
    ctx.strokeStyle = '#222';
    ctx.beginPath();
    ctx.moveTo(padding+i*segmentWidth, 0);
    ctx.lineTo(padding+i*segmentWidth, c.height);
    ctx.stroke();

    if (i == numSegments-1) {
      ctx.beginPath();
      ctx.moveTo(padding+(i+1)*segmentWidth, 0);
      ctx.lineTo(padding+(i+1)*segmentWidth, c.height);
      ctx.stroke();
    }

    //Segment blocks
    var segment = segments[i];
    ctx.fillStyle = segmentColors[i%segmentColors.length];
    var proportionalHeight = (segment['count']/(highestSegmentCountValue));

    //Post-processing to move values toward the center, making it look better
    var centerWeighting = .2;
    proportionalHeight = proportionalHeight+(centerWeighting*(.5-proportionalHeight));
    ctx.fillRect(  padding+i*segmentWidth, c.height, segmentWidth, -c.height*proportionalHeight);

    var textYOffset = 13;
    var textXOffset = 2;

    ctx.fillStyle = "#000";
    ctx.font = (c.height/5) + "px 'Helvetica Neue'";
    ctx.fillText(segment['start'] + ' - ' + segment['start'], textXOffset+padding+i*segmentWidth-1, textYOffset-1);
    ctx.fillText(segment['start'] + ' - ' + segment['start'], textXOffset+padding+i*segmentWidth+1, textYOffset+1);
    ctx.fillStyle = "#ddd";
    ctx.font = (c.height/5) + "px 'Helvetica Neue'";
    ctx.fillText(segment['start'] + ' - ' + segment['end'], textXOffset+padding+i*segmentWidth, textYOffset);

    if (i == numSegments-1) {
      ctx.fillText(segment['end'], textXOffset+padding+(i+1)*segmentWidth, textYOffset);
    }
  }

  //Overlay with drag
  var overlayXStart = parseInt($('#date-range-canvas').attr('data-drag-start-x'));
  var overlayXEnd = parseInt($('#date-range-canvas').attr('data-drag-end-x'));

  if(overlayXStart < overlayXEnd) {
    var startOfPixelRange = overlayXStart;
    var endOfPixelRange = overlayXEnd;
  } else {
    var startOfPixelRange = overlayXEnd;
    var endOfPixelRange = overlayXStart;
  }

  //Apply padding corrections
  startOfPixelRange -= padding;
  endOfPixelRange -= padding;

  var fullPixelRange = segmentWidth*numSegments;

  var dateRangeInYears = numSegments*yearsPerSegment;
  var newStartYearFilter = Math.round((startOfPixelRange/fullPixelRange)*dateRangeInYears)+earliestStartYear;
  var newEndYearFilter = Math.round((endOfPixelRange/fullPixelRange)*dateRangeInYears)+earliestStartYear;

  $('#date-range-canvas').attr('data-new-start-year-filter', newStartYearFilter);
  $('#date-range-canvas').attr('data-new-end-year-filter', newEndYearFilter);

  ctx.globalAlpha=0.5;
  ctx.fillRect(  overlayXStart, 0, overlayXEnd-overlayXStart, c.height);
  ctx.globalAlpha=1.0;
};
